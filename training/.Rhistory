avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
}
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearAvgRSq<-0
for (j in 1:ncol(data)-1){
f<-do.call("paste0", expand.grid("Count~","workload",j,sep=""))
linearModel<-lm(f,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
}
data<-log10(data+1)
powAvgRSq<-0
avgComplexity<-0
for (j in 1:ncol(data)-1){
f<-paste("Count~","workload",j,sep="")
powerModel<-lm(f,data = data,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
}
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearAvgRSq<-0
for (j in 1:ncol(data)-1){
f<-do.call("paste0", expand.grid("Count~","workload",j,sep=""))
linearModel<-lm(f,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
}
data<-log10(data+1)
powAvgRSq<-0
avgComplexity<-0
for (j in 1:ncol(data)-1){
f<-do.call("paste0", expand.grid("Count~","workload",j,sep=""))
powerModel<-lm(f,data = data,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
}
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearAvgRSq<-0
linearModel<-lm(Count~workload1,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
linearModel<-lm(Count~workload2,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
data<-log10(data+1)
powAvgRSq<-0
avgComplexity<-0
powerModel<-lm(Count~workload1,data = data,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
powerModel<-lm(Count~workload2,data = data,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearAvgRSq<-0
linearModel<-lm(Count~workload1,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
linearModel<-lm(Count~workload2,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
data<-log10(data+1)
powAvgRSq<-0
avgComplexity<-0
powerModel<-lm(Count~workload1,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
powerModel<-lm(Count~workload2,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
warning()
warnings()
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearAvgRSq<-0
linearModel<-lm(Count~workload1,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
linearModel<-lm(Count~workload2,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
data<-log10(data+1)
powAvgRSq<-0
avgComplexity<-0
powerModel<-lm(Count~workload1,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
powerModel<-lm(Count~workload2,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearAvgRSq<-0
linearModel<-lm(Count~workload1,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
linearModel<-lm(Count~workload2,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
data<-log10(data+1)
powAvgRSq<-0
avgComplexity<-0
powerModel<-lm(Count~workload1,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
powerModel<-lm(Count~workload2,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
selectedComplexity<-round(x, digits = 0)
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearAvgRSq<-0
linearModel<-lm(Count~workload1,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
linearModel<-lm(Count~workload2,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
data<-log10(data+1)
powAvgRSq<-0
avgComplexity<-0
powerModel<-lm(Count~workload1,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
powerModel<-lm(Count~workload2,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
selectedComplexity<-round(x, digits = 1)
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearAvgRSq<-0
linearModel<-lm(Count~workload1,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
linearModel<-lm(Count~workload2,data = data)
sumLin<-summary(linearModel)
linearModelRSq<-sumLin$r.squared
linearAvgRSq<-linearAvgRSq+linearModelRSq
data<-log10(data+1)
powAvgRSq<-0
avgComplexity<-0
powerModel<-lm(Count~workload1,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
powerModel<-lm(Count~workload2,data = data)
sumPow<-summary(powerModel)
powModelRSq<-sumPow$r.squared
powAvgRSq<-powAvgRSq+powModelRSq
avgComplexity<-avgComplexity+max(as.numeric(unlist(powerModel$coefficients)))
linearAvgRSq<-linearAvgRSq/(ncol(data)-1)
powAvgRSq<-powAvgRSq/(ncol(data)-1)
avgComplexity<-avgComplexity/(ncol(data)-1)
selectedComplexity<-0
if(linearAvgRSq>=powAvgRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-avgComplexity
}
selectedComplexity<-round(selectedComplexity, digits = 0)
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearModel<-lm(Count~workload,data = data);
powerModel<-lm(log10(Count+1)~log10(workload+1),data = data);
print(linearModel)
print(powerModel)
sumLin<-summary(linearModel)
sumPow<-summary(powerModel)
linearModelRSq<-sumLin$r.squared
powModelRSq<-sumPow$r.squared
selectedComplexity<-0
if (is.na(linearModelRSq)||is.na(powModelRSq)) {
selectedComplexity<-1
}
else if(linearModelRSq>=powModelRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-max(as.numeric(unlist(powerModel$coefficients)))
}
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
setwd("F:/Software Analytics/WDPB Loops Detector/training")
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearModel<-lm(Count~workload,data = data);
powerModel<-lm(log10(Count+1)~log10(workload+1),data = data);
print(linearModel)
print(powerModel)
sumLin<-summary(linearModel)
sumPow<-summary(powerModel)
linearModelRSq<-sumLin$r.squared
powModelRSq<-sumPow$r.squared
selectedComplexity<-0
if (is.na(linearModelRSq)||is.na(powModelRSq)) {
selectedComplexity<-1
}
else if(linearModelRSq>=powModelRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-max(as.numeric(unlist(powerModel$coefficients)))
}
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearModel<-lm(Count~workload,data = data);
powerModel<-lm(log10(Count+1)~log10(workload+1),data = data);
print(linearModel)
print(powerModel)
sumLin<-summary(linearModel)
sumPow<-summary(powerModel)
linearModelRSq<-sumLin$r.squared
powModelRSq<-sumPow$r.squared
selectedComplexity<-0
if (is.na(linearModelRSq)||is.na(powModelRSq)) {
selectedComplexity<-1
}
else if(linearModelRSq>=powModelRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-max(as.numeric(unlist(powerModel$coefficients)))
}
selectedComplexity<-round(selectedComplexity, digits = 0)
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
temp = list.files(pattern="*.csv")
trainingData<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearModel<-lm(Count~workload,data = data);
powerModel<-lm(log10(Count+1)~log10(workload+1),data = data);
print(linearModel)
print(powerModel)
sumLin<-summary(linearModel)
sumPow<-summary(powerModel)
linearModelRSq<-sumLin$r.squared
powModelRSq<-sumPow$r.squared
selectedComplexity<-0
equation<-""
if (is.na(linearModelRSq)||is.na(powModelRSq)) {
selectedComplexity<-1
equation<-smma
}
else if(linearModelRSq>=powModelRSq){
selectedComplexity<-1
}
else{
selectedComplexity<-max(as.numeric(unlist(powerModel$coefficients)))
}
selectedComplexity<-round(selectedComplexity, digits = 0)
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
write(trainingData,"complexity.txt")
}
selectedComplexity<-1
equation<-sumLin$coefficients
equation
equation<-sumLin$terms
equation
linearModel$fitted.values
data
temp = list.files(pattern="*.csv")
trainingData<-""
data<-""
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
write("","complexity.txt")
for (i in 1:length(temp)){
data<-read.csv(temp[i],header=TRUE)
linearModel<-lm(Count~workload,data = data);
powerModel<-lm(log10(Count+1)~log10(workload+1),data = data);
print(linearModel)
print(powerModel)
sumLin<-summary(linearModel)
sumPow<-summary(powerModel)
linearModelRSq<-sumLin$r.squared
powModelRSq<-sumPow$r.squared
selectedComplexity<-0
content<-""
if (is.na(linearModelRSq)||is.na(powModelRSq)) {
selectedComplexity<-1
content<-linearModel$fitted.values
}
else if(linearModelRSq>=powModelRSq){
selectedComplexity<-1
content<-linearModel$fitted.values
}
else{
selectedComplexity<-max(as.numeric(unlist(powerModel$coefficients)))
content<-powerModel$fitted.values
}
selectedComplexity<-round(selectedComplexity, digits = 0)
dataToWrite<-paste(temp[i], selectedComplexity, sep = "\t")
trainingData<-paste(trainingData, dataToWrite,"\n", sep = "")
data<-paste(temp[i],data, content,"\n", sep = ",")
write(trainingData,"complexity.txt")
write(data,"fitted.txt")
}
content
